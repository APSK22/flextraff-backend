name: CD - Deploy to Production

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run tests
      run: |
        # Run only essential unit tests for deployment validation
        python -m pytest tests/test_traffic_algorithm.py tests/test_api_endpoints.py -v --tb=short --maxfail=5 --disable-warnings

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/flextraff-backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment: staging

    steps:
    - name: Deploy to Staging (Railway)
      run: |
        curl -X POST \
          -H "Authorization: Bearer ${{ secrets.RAILWAY_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "variables": {
              "DOCKER_IMAGE": "${{ needs.build-and-test.outputs.image-tag }}"
            }
          }' \
          "${{ secrets.RAILWAY_STAGING_WEBHOOK }}"

    - name: Wait for deployment
      run: sleep 30

    - name: Health check - Staging
      run: |
        for i in {1..10}; do
          if curl -f "${{ secrets.STAGING_URL }}/health"; then
            echo "Staging deployment successful!"
            exit 0
          fi
          echo "Attempt $i failed, retrying in 10 seconds..."
          sleep 10
        done
        echo "Staging deployment failed!"
        exit 1

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-test, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    environment: production

    steps:
    - name: Deploy to Production (Render)
      run: |
        curl -X POST \
          -H "Authorization: Bearer ${{ secrets.RENDER_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "imageUrl": "${{ needs.build-and-test.outputs.image-tag }}"
          }' \
          "${{ secrets.RENDER_PRODUCTION_WEBHOOK }}"

    - name: Wait for deployment
      run: sleep 60

    - name: Health check - Production
      run: |
        for i in {1..15}; do
          if curl -f "${{ secrets.PRODUCTION_URL }}/health"; then
            echo "Production deployment successful!"
            exit 0
          fi
          echo "Attempt $i failed, retrying in 15 seconds..."
          sleep 15
        done
        echo "Production deployment failed!"
        exit 1

    - name: Notify deployment success
      if: success()
      run: |
        echo "ðŸš€ Production deployment successful!"
        echo "API URL: ${{ secrets.PRODUCTION_URL }}"
        echo "Documentation: ${{ secrets.PRODUCTION_URL }}/docs"

  rollback:
    runs-on: ubuntu-latest
    if: failure() && (startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production')
    needs: [deploy-production]
    environment: production

    steps:
    - name: Rollback Production Deployment
      run: |
        echo "Rolling back production deployment..."
        curl -X POST \
          -H "Authorization: Bearer ${{ secrets.RENDER_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "imageUrl": "${{ secrets.LAST_KNOWN_GOOD_IMAGE }}"
          }' \
          "${{ secrets.RENDER_PRODUCTION_WEBHOOK }}"